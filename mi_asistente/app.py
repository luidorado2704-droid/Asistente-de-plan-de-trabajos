# app.py
import streamlit as st
import requests  # Para llamar a la API de Semantic Scholar y a Groq
from docx import Document  # Para generar el Word
from docx.shared import Pt
import io  # Para crear el archivo en memoria

# --- Configuraci√≥n de APIs ---
# Configura la API Key de Groq (¬°Agr√©galo a tus secrets.toml!)
GROQ_API_KEY = st.secrets["GROQ_API_KEY"]
GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"

# --- Funci√≥n para llamar a Groq ---
def llamar_groq(mensajes, model="llama-3.3-70b-versatile"):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": mensajes,
        "temperature": 0.1  # Baja temperatura para respuestas m√°s precisas
    }
    try:
        response = requests.post(GROQ_API_URL, json=data, headers=headers)
        response.raise_for_status()  # Lanza error si la solicitud falla
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        st.error(f"Error al llamar a Groq: {e}")
        return None

# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(page_title="Asistente de Dise√±o Experimental", page_icon="üß™", layout="wide")
st.title("üß™ Asistente para Planes de Investigaci√≥n en Biotecnolog√≠a")
st.write("""
Esta herramienta ayuda a transformar una idea de investigaci√≥n en un plan de trabajo detallado y basado en la literatura cient√≠fica.
Ingrese su idea en el cuadro de texto y haga clic en 'Generar Plan'.
""")

# --- Widget de Entrada ---
idea_del_usuario = st.text_area(
    label="**Describa su idea de investigaci√≥n en biotecnolog√≠a:**",
    height=100,
    placeholder="Ej: Evaluar capacidad antioxidante y antiinflamatoria de hidrolizados proteicos de mistol y cha√±ar..."
)

boton_generar = st.button("üöÄ Generar Plan de Trabajo Basado en Literatura", type="primary")

# --- Funci√≥n para Buscar en Semantic Scholar ---
def buscar_papers(terminos_busqueda):
    """Busca papers en Semantic Scholar y devuelve una lista de abstracts."""
    abstracts = []
    titulos = []
    url = "https://api.semanticscholar.org/graph/v1/paper/search"
    params = {
        'query': terminos_busqueda,
        'limit': 10,  # N√∫mero de resultados
        'fields': 'title,abstract'  # Campos a recuperar
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()  # Lanza error si la solicitud falla
        datos = response.json()
        
        for paper in datos.get('data', []):
            if paper.get('abstract'):
                abstracts.append(paper['abstract'])
                titulos.append(paper.get('title', 'Sin t√≠tulo'))
        return abstracts, titulos
    except requests.exceptions.RequestException as e:
        st.error(f"Error al buscar en Semantic Scholar: {e}")
        return [], []

# --- Funci√≥n para crear el documento Word ---
def crear_documento_word(contenido, titulo="Plan_de_Investigacion"):
    """Crea un documento Word (.docx) a partir del texto generado."""
    doc = Document()
    # A√±ade un t√≠tulo al documento
    titulo_doc = doc.add_heading(titulo, level=0)
    titulo_doc.alignment = 1  # Centrado

    # Divide el contenido en secciones (suponiendo que est√° en Markdown)
    secciones = contenido.split('**')
    for i, seccion in enumerate(secciones):
        if seccion.strip() and i % 2 == 1:  # Es un t√≠tulo de secci√≥n (negrita en Markdown)
            heading = doc.add_heading(seccion.strip(), level=1)
        else:
            # Es texto normal
            p = doc.add_paragraph(seccion.strip())
    # Guarda el documento en un buffer de memoria
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# --- L√≥gica Principal al Presionar el Bot√≥n ---
if boton_generar:
    if idea_del_usuario:
        with st.spinner('Fase 1/3: Generando t√©rminos de b√∫squeda optimizados...'):
            # --- PASO 1: Prompt para generar t√©rminos de b√∫squeda ---
            prompt_terminos = f"""
            Eres un experto en dise√±o experimental en biotecnolog√≠a y b√∫squeda de literatura cient√≠fica.
            TU TAREA: Dada la siguiente idea de investigaci√≥n, genera una lista de T√âRMINOS DE B√öSQUEDA OPTIMIZADOS para usar en una API de art√≠culos cient√≠ficos (como Semantic Scholar).
            Los t√©rminos deben ser precisos, relevantes y capturar los conceptos clave de la idea. Devu√©lvelos como una sola cadena de texto separada por comas.

            IDEA: {idea_del_usuario}

            T√âRMINOS DE B√öSQUEDA:
            """
            # LLAMADA A GROQ (reemplazo de Gemini)
            mensajes_terminos = [{"role": "user", "content": prompt_terminos}]
            response_terminos = llamar_groq(mensajes_terminos)
            
            if response_terminos is None:
                st.error("Error al generar t√©rminos de b√∫squeda. Intenta nuevamente.")
                st.stop()
                
            terminos_busqueda = response_terminos.strip()
            st.write("**T√©rminos de b√∫squeda generados:**", terminos_busqueda)

        with st.spinner('Fase 2/3: Buscando los art√≠culos cient√≠ficos m√°s relevantes...'):
            # --- PASO 2: B√∫squeda en Semantic Scholar ---
            abstracts, titulos = buscar_papers(terminos_busqueda)
            if not abstracts:
                st.warning("No se encontraron art√≠culos con abstracts. Generando plan basado solo en conocimiento general.")
                contexto_literatura = "No se encontraron art√≠culos recientes espec√≠ficos."
            else:
                # Une los primeros 5-7 abstracts para no exceder el contexto del modelo
                contexto_literatura = "\n\n".join([f"T√≠tulo: {titulo}\nAbstract: {abstract}" for titulo, abstract in zip(titulos[:7], abstracts[:7])])

        with st.spinner('Fase 3/3: Generando el plan de trabajo con base en la literatura...'):
            # --- PASO 3: Prompt FINAL con contexto de la literatura ---
            prompt_final = f"""
            Eres un experto en dise√±o experimental en biotecnolog√≠a. Tu tarea es generar un plan de trabajo detallado y factible para la idea de investigaci√≥n proporcionada.

            **IDEA DEL INVESTIGADOR:**
            {idea_del_usuario}

            **CONTEXTO DE LITERATURA CIENT√çFICA RECIENTE (Abstracts de art√≠culos relevantes):**
            {contexto_literatura}

            **INSTRUCCIONES PARA EL PLAN:**
            Bas√°ndote en la idea y en la literatura cient√≠fica proporcionada, genera un plan de trabajo que incluya las siguientes secciones en espa√±ol:

            1.  **T√≠tulo Tentativo del Proyecto:** [Sugiere un t√≠tulo basado en la idea y la literatura]
            2.  **Introducci√≥n y Estado del Arte:** [S√≠ntesis breve del contexto, citando hallazgos clave de los abstracts si son relevantes]
            3.  **Objetivos:**
                - **Objetivo General:** [Uno]
                - **Objetivos Espec√≠ficos:** [3-5]
            4.  **Metodolog√≠a Propuesta (DETALLADA):**
                - **Dise√±o Experimental:** [Tipo de estudio, grupos, r√©plicas]
                - **Extracci√≥n de Prote√≠nas:** [Protocolo sugerido, equipos]
                - **Hidr√≥lisis Enzim√°tica:** [Enzimas a probar, condiciones]
                - **Ensayo de Capacidad Antioxidante:** [M√©todos espec√≠ficos, e.g., ORAC, DPPH, ABTS]
                - **Ensayo de Actividad Antiinflamatoria:** [M√©todos espec√≠ficos, e.g., inhibici√≥n de COX-2, ensayos con c√©lulas]
                - **An√°lisis Estad√≠stico:** [Software, tests a usar]
            5.  **Cronograma Tentativo:** [Dividido por trimestres o meses, con las actividades principales]
            6.  **Recursos Necesarios:** [Reactivos, equipos, software, personal]

            **Formato:** Usa **negritas** para los t√≠tulos de secci√≥n (ej: **4. Metodolog√≠a Propuesta**) y listas con vi√±etas para los items.
            """
            
            # LLAMADA A GROQ (reemplazo de Gemini)
            mensajes_final = [{"role": "user", "content": prompt_final}]
            response_final = llamar_groq(mensajes_final)
            
            if response_final is None:
                st.error("Error al generar el plan final. Intenta nuevamente.")
                st.stop()
                
            plan_final = response_final

        # --- MOSTRAR RESULTADO ---
        st.success("¬°Plan generado con √©xito! Basado en el an√°lisis de la literatura cient√≠fica.")
        st.write(plan_final)

        # --- BOT√ìN DE DESCARGA PARA WORD ---
        doc_buffer = crear_documento_word(plan_final, titulo=f"Plan_{idea_del_usuario[:20]}")
        st.download_button(
            label="üì• Descargar Plan en Word (.docx)",
            data=doc_buffer,
            file_name="plan_investigacion.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

    else:
        st.warning("Por favor, ingrese una idea de investigaci√≥n primero.")